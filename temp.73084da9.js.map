{"version":3,"sources":["weatherData.js","src/js/temp.js"],"names":["HOST","API_KEY","apiUrl","lat","lon","region","require","tempElem","document","querySelector","location","COORDS","getWeatherData","fetch","method","headers","then","response","json","name","temp","main","innerText","locaIcon","createElement","classList","add","span","toUpperCase","append","catch","err","console","error","getWeather","saveCoords","coordsObj","localStorage","setItem","JSON","stringify","handleGeoSucces","position","coords","latitude","longitude","handleGeoError","log","setCoords","navigator","geolocation","getCurrentPosition","loadCoords","loadedCoords","getItem","parse","init"],"mappings":";AAEO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,QAAA,QAAA,UAAA,EAFA,IAAMA,EAAO,4CAEb,QAAA,KAAA,EADA,IAAMC,EAAU,qDAChB,QAAA,QAAA,EAAA,IAAMC,EAAS,SAACC,EAAKC,EAAKC,GACcA,MAAAA,6CAAAA,OAAAA,EAAmBF,cAAAA,OAAAA,EAAWC,SAAAA,OAAAA,EADvD,kBAAf,QAAA,OAAA;;ACF2BE,IAAAA,EAAAA,QAAQ,qBAAlCJ,EAAAA,EAAAA,OAAQF,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,QAEhBM,EAAWC,SAASC,cAAc,YACtCC,EAAWF,SAASC,cAAc,gBAE9BE,EAAS,SAETC,EAAiB,SAACT,EAAKC,EAAKC,GAChCQ,MAAMX,EAAOC,EAAKC,EAAKC,GAAS,CAC9BS,OAAQ,MACRC,QAAS,CACYf,kBAAAA,EACDC,iBAAAA,KAGnBe,KAAK,SAACC,GAAaA,OAAAA,EAASC,SAC5BF,KAAK,SAACE,GAEHC,IAAAA,EAEED,EAFFC,KACQC,EACNF,EADFG,KAAQD,KAGN,GAACD,GAASC,EAAV,CAEJb,EAASe,UAAeF,GAAAA,OAAAA,EAAxB,MAEMG,IAAAA,EAAWf,SAASgB,cAAc,KACxCD,EAASE,UAAUC,IAAI,MAAO,qBACxBC,IAAAA,EAAOnB,SAASgB,cAAc,QACpCG,EAAKL,UAAYH,EAAKS,cACtBlB,EAASY,UAAY,GACrBZ,EAASmB,OAAON,GAChBb,EAASmB,OAAOF,MAEjBG,MAAM,SAACC,GACNC,QAAQC,MAAMF,MAIpB,SAASG,EAAW/B,EAAKC,GAAKC,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,QACrCO,EAAeT,EAAKC,EAAKC,GAG3B,SAAS8B,EAAWC,GAClBC,aAAaC,QAAQ3B,EAAQ4B,KAAKC,UAAUJ,IAG9C,SAASK,EAAgBC,GAGnBA,IAAAA,EAAAA,EADFC,OAAUC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAEtBV,EAAW,CAAES,SAAAA,EAAUC,UAAAA,IACvBX,EAAWU,EAAUC,GAGvB,SAASC,IACPd,QAAQe,IAAI,6BAGd,SAASC,IACPC,UAAUC,YAAYC,mBAAmBV,EAAiBK,GAG5D,SAASM,IACDC,IAAAA,EAAehB,aAAaiB,QAAQ3C,GACtC,GAAC0C,EAEE,CAC2Bd,IAAAA,EAAAA,KAAKgB,MAAMF,GAC3CnB,EADQU,EAAAA,SAAUC,EAAAA,gBAFlBG,IAOJ,SAASQ,IACPJ,IAGFI","file":"temp.73084da9.js","sourceRoot":"..","sourcesContent":["export const HOST = \"community-open-weather-map.p.rapidapi.com\";\nexport const API_KEY = \"93a10d14dcmsh93da9cc216db5afp17296cjsnaa76b8454f85\";\nexport const apiUrl = (lat, lon, region) =>\n  `https://rapidapi.p.rapidapi.com/weather?q=${region}%2Ckr&lat=${lat}&lon=${lon}&units=metric`;\n","const { apiUrl, HOST, API_KEY } = require(\"../../weatherData\");\n\nconst tempElem = document.querySelector(\".js-temp\"),\n  location = document.querySelector(\".js-location\");\n\nconst COORDS = \"coords\";\n\nconst getWeatherData = (lat, lon, region) => {\n  fetch(apiUrl(lat, lon, region), {\n    method: \"GET\",\n    headers: {\n      \"x-rapidapi-host\": HOST,\n      \"x-rapidapi-key\": API_KEY,\n    },\n  })\n    .then((response) => response.json())\n    .then((json) => {\n      const {\n        name,\n        main: { temp },\n      } = json;\n\n      if (!name || !temp) return;\n\n      tempElem.innerText = `${temp} Â°`;\n\n      const locaIcon = document.createElement(\"i\");\n      locaIcon.classList.add(\"fas\", \"fa-map-marker-alt\");\n      const span = document.createElement(\"span\");\n      span.innerText = name.toUpperCase();\n      location.innerText = \"\";\n      location.append(locaIcon);\n      location.append(span);\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n};\n\nfunction getWeather(lat, lon, region = \"Seoul\") {\n  getWeatherData(lat, lon, region);\n}\n\nfunction saveCoords(coordsObj) {\n  localStorage.setItem(COORDS, JSON.stringify(coordsObj));\n}\n\nfunction handleGeoSucces(position) {\n  const {\n    coords: { latitude, longitude },\n  } = position;\n  saveCoords({ latitude, longitude });\n  getWeather(latitude, longitude);\n}\n\nfunction handleGeoError() {\n  console.log(\"Can't access geo location\");\n}\n\nfunction setCoords() {\n  navigator.geolocation.getCurrentPosition(handleGeoSucces, handleGeoError);\n}\n\nfunction loadCoords() {\n  const loadedCoords = localStorage.getItem(COORDS);\n  if (!loadedCoords) {\n    setCoords();\n  } else {\n    const { latitude, longitude } = JSON.parse(loadedCoords);\n    getWeather(latitude, longitude);\n  }\n}\n\nfunction init() {\n  loadCoords();\n}\n\ninit();\n"]}